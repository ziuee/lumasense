package me.luma.client.management.module.impl.movement;

import java.util.ArrayList;

import org.lwjgl.input.Keyboard;

import me.luma.client.ClientLoader;
import me.luma.client.management.event.EventManager;
import me.luma.client.management.event.EventTarget;
import me.luma.client.management.event.impl.Event2D;
import me.luma.client.management.event.impl.EventMove;
import me.luma.client.management.event.impl.EventReceivePacket;
import me.luma.client.management.event.impl.EventSendPacket;
import me.luma.client.management.event.impl.EventUpdate;
import me.luma.client.management.gui.clickgui.settings.SettingArrayList;
import me.luma.client.management.gui.clickgui.settings.SettingBoolean;
import me.luma.client.management.gui.clickgui.settings.SettingSlider;
import me.luma.client.management.module.Category;
import me.luma.client.management.module.Module;
import me.luma.client.management.utils.Stopwatch;
import me.luma.client.management.utils.TimerTEst;
import me.luma.client.management.utils.TimerUtil;
import net.minecraft.client.Minecraft;
import net.minecraft.client.entity.EntityPlayerSP;
import net.minecraft.client.network.NetHandlerPlayClient;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C0BPacketEntityAction;
import net.minecraft.network.play.client.C0CPacketInput;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.network.play.server.S32PacketConfirmTransaction;
import net.minecraft.potion.Potion;
import net.minecraft.util.MovementInput;
import net.minecraft.util.Vec3;

public class Fly extends Module {
	
	ArrayList<Packet> packetListZ = new ArrayList<>();
	TimerTEst timerUtil = new TimerTEst();
	private final Stopwatch stopwatch = new Stopwatch();
    public double positionOffset, speedMult, stageTwoMult, startOffset, jumpModifier, damageOffset, damageY, damageYTwo, yDown;
    private int ticks;
    private Vec3 lastPos;
    private boolean tp;
	private int stage;
	private double moveSpeed;
	private double lastDist;
    
    SettingBoolean Damage;
    SettingBoolean blink;
    SettingBoolean flyMultiplier;
    SettingSlider multiplytime;
    SettingSlider multiplyspeed;
    SettingSlider speed;
    SettingArrayList FlyMode;
    
	public Fly() {
		super("Fly", Keyboard.KEY_F, Category.MOVEMENT);
		
		ArrayList<String> flymodeS = new ArrayList<String>();
		flymodeS.add("Vanilla");
		flymodeS.add("Verus");
		flymodeS.add("Hypixel");
		flymodeS.add("Spartan");
		FlyMode = new SettingArrayList("Fly Mode", this, flymodeS, "Vanilla");
		
		multiplyspeed = new SettingSlider("Multiplier Speed", this, 4, 3, 5, true, false);
		multiplytime = new SettingSlider("Multiplier Time", this, 100.0D, 50.0D, 3000.0D, true, false);
		
		flyMultiplier = new SettingBoolean("Multiplier", this, true);
		Damage = new SettingBoolean("Damage", this, true);
		blink = new SettingBoolean("Blink", this, true);
		
	}
	
	@EventTarget
	public void onUpdate(EventUpdate event) {
		if(FlyMode.getArraListValue().equalsIgnoreCase("Vanilla")) {
			
		}
		
		if(FlyMode.getArraListValue().equalsIgnoreCase("Verus")) {
			mc.thePlayer.fallDistance = 0.0f;
	        mc.thePlayer.motionX = 0.0;
	        mc.thePlayer.motionY = 0.0;
	        mc.thePlayer.motionZ = 0.0;
	        mc.thePlayer.posY += 1;
	        mc.thePlayer.posY -= 0.1;
	        mc.timer.timerSpeed = 0.25F; // credit cabb
	        if(flyMultiplier.getBooleanValue() && !mc.gameSettings.keyBindJump.isKeyDown()) {
	        	if (!timerUtil.hasElapsed(multiplytime.getSliderValue().longValue())) {
	        		setSpeed(multiplyspeed.getSliderValue());
	        		 mc.timer.timerSpeed = 0.30F;
	        	} else {
	        		 mc.timer.timerSpeed = 0.25F;
                    setSpeed(1.8);
	        	}
		        /*if (!timerUtil.elapsed((long) 500L)) {
		        	setSpeed(multiplyspeed.getSliderValue());
		        	ClientLoader.addChatMessage("1");
		        } else {
		        	ClientLoader.addChatMessage("default");
		        	setSpeed(1.8);
		        }*/
	        } else {
	        	setSpeed(1.8);
	        }
	        if (mc.gameSettings.keyBindJump.isKeyDown()) {
	            EntityPlayerSP player = mc.thePlayer;
	            mc.thePlayer.motionY += 1.0;
	        }
	        if (mc.gameSettings.keyBindSneak.isKeyDown()) {
	            mc.thePlayer.motionY -= 1.0;
	        }
		}
	}
	
	public static double getJumpBoostModifier(double baseJumpHeight) {
	      if (mc.thePlayer.isPotionActive(Potion.jump)) {
	         int amplifier = mc.thePlayer.getActivePotionEffect(Potion.jump).getAmplifier();
	         baseJumpHeight += (double)((float)(amplifier + 1) * 0.1F);
	      }

	      return baseJumpHeight;
	   }
	
	public static double getBaseMoveSpeed() {
	      double baseSpeed = 0.2875D;
	      if (mc.thePlayer.isPotionActive(Potion.moveSpeed)) {
	         baseSpeed *= 1.0D + 0.2D * (double)(mc.thePlayer.getActivePotionEffect(Potion.moveSpeed).getAmplifier() + 1);
	      }

	      return baseSpeed;
	   }
	
	
	@EventTarget
	public void onSendPacket(EventSendPacket event) {
		Packet packet = event.getPacket();
		if(blink.getBooleanValue()) {
			if (packet instanceof C03PacketPlayer) {
				packetListZ.add(packet);
	            event.setCancelled(true);
	            System.out.println("Packet cancelled");
	        }
		} 
	}
	
	@EventTarget
	public void onReceivePacket(EventReceivePacket event) {
	}
	
	public static void setSpeed(EventMove moveEvent, double moveSpeed) {
	      setSpeed(moveEvent, moveSpeed, mc.thePlayer.rotationYaw, (double)mc.thePlayer.movementInput.moveStrafe, (double)mc.thePlayer.movementInput.moveForward);
	   }
	
	public static void setSpeed(EventMove moveEvent, double moveSpeed, float pseudoYaw, double pseudoStrafe, double pseudoForward) {
	      double forward = pseudoForward;
	      double strafe = pseudoStrafe;
	      float yaw = pseudoYaw;
	      if (pseudoForward != 0.0D) {
	         if (pseudoStrafe > 0.0D) {
	            yaw = pseudoYaw + (float)(pseudoForward > 0.0D ? -45 : 45);
	         } else if (pseudoStrafe < 0.0D) {
	            yaw = pseudoYaw + (float)(pseudoForward > 0.0D ? 45 : -45);
	         }

	         strafe = 0.0D;
	         if (pseudoForward > 0.0D) {
	            forward = 1.0D;
	         } else if (pseudoForward < 0.0D) {
	            forward = -1.0D;
	         }
	      }

	      if (strafe > 0.0D) {
	         strafe = 1.0D;
	      } else if (strafe < 0.0D) {
	         strafe = -1.0D;
	      }

	      double mx = Math.cos(Math.toRadians((double)(yaw + 90.0F)));
	      double mz = Math.sin(Math.toRadians((double)(yaw + 90.0F)));
	      moveEvent.x = forward * moveSpeed * mx + strafe * moveSpeed * mz;
	      moveEvent.z = forward * moveSpeed * mz - strafe * moveSpeed * mx;
	   }
	
	@Override
	public void onEnable() {
		super.onEnable();
		this.tp = false;
		timerUtil.reset();
		if(Damage.getBooleanValue()) {
			if(mc.thePlayer.onGround) {
				//mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true));
		        //mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY + 0.18D, mc.thePlayer.posZ, true));
		        //mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY + 0.08D, mc.thePlayer.posZ, true));
				NetHandlerPlayClient netHandler = mc.getNetHandler();
			    final double offset = 0.4122222218322211111111F;
			    final EntityPlayerSP player = mc.thePlayer;
			    final double x = player.posX;
			    final double y = player.posY;
			    final double z = player.posZ;
			     
			    for (int i = 0; i < 9; i++) {
			        netHandler.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(x, y + offset, z, false));
			        netHandler.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(x, y + 0.000002737272, z, false));
			        netHandler.addToSendQueue(new C03PacketPlayer(false));
			    }
			    netHandler.addToSendQueue(new C03PacketPlayer(true));
			}
		}
	}
	
	@Override
	public void onDisable() {
			for(final Packet packet : packetListZ) {
    			mc.getNetHandler().addToSendQueue(packet);
			}
    		packetListZ.clear();
		super.onDisable();
		timerUtil.reset();
		mc.thePlayer.capabilities.isFlying = false;
		mc.timer.timerSpeed = 1F;
	}
	
	public static void setSpeed(double speed) {
        double forward = MovementInput.moveForward;
        double strafe = MovementInput.moveStrafe;
        float yaw = mc.thePlayer.rotationYaw;
        if (forward == 0.0 && strafe == 0.0) {
            mc.thePlayer.motionX = 0.0;
            mc.thePlayer.motionZ = 0.0;
        } else {
            if (forward != 0.0) {
                if (strafe > 0.0) {
                    yaw += (float)(forward > 0.0 ? -45 : 45);
                } else if (strafe < 0.0) {
                    yaw += (float)(forward > 0.0 ? 45 : -45);
                }
                strafe = 0.0;
                if (forward > 0.0) {
                    forward = 1.0;
                } else if (forward < 0.0) {
                    forward = -1.0;
                }
            }
            mc.thePlayer.motionX = forward * speed * Math.cos(Math.toRadians(yaw + 90.0f)) + strafe * speed * Math.sin(Math.toRadians(yaw + 90.0f));
            mc.thePlayer.motionZ = forward * speed * Math.sin(Math.toRadians(yaw + 90.0f)) - strafe * speed * Math.cos(Math.toRadians(yaw + 90.0f));
        }
	}
}
