package me.luma.client.management.module.impl.movement;

import java.util.ArrayList;
import java.util.List;

import org.lwjgl.input.Keyboard;

import me.luma.client.core.registry.impl.ClientLoader;
import me.luma.client.management.event.EventTarget;
import me.luma.client.management.event.impl.Event3D;
import me.luma.client.management.event.impl.EventMove;
import me.luma.client.management.event.impl.EventPreMotionUpdate;
import me.luma.client.management.event.impl.EventSendPacket;
import me.luma.client.management.event.impl.EventUpdate;
import me.luma.client.management.module.Category;
import me.luma.client.management.module.Module;
import me.luma.client.management.module.impl.combat.Velocity;
import me.luma.client.management.utils.MoveUtils;
import me.luma.client.management.utils.TimerTEst;
import net.minecraft.init.Items;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C07PacketPlayerDigging;
import net.minecraft.network.play.client.C08PacketPlayerBlockPlacement;
import net.minecraft.network.play.server.S12PacketEntityVelocity;
import net.minecraft.network.play.server.S27PacketExplosion;
import net.minecraft.util.BlockPos;
import net.minecraft.util.EnumFacing;

public class LongJump extends Module {
	
	private TimerTEst timer = new TimerTEst();
	
	private boolean canLongJump = false;

    private boolean check = false;

    private double posY = 0;

    private final List<C03PacketPlayer> aac5C03List = new ArrayList<>();

    private boolean nigger = false;

    private int slot = 0;
	
	private static float groundTicks;

	public LongJump() {
		super("LongJump", Keyboard.KEY_X, Category.MOVEMENT);
	}
	
	@EventTarget
	public void onUpdate(EventPreMotionUpdate event) {
		if(mc.thePlayer.hurtTime > 0 && canLongJump && !check) {
			mc.thePlayer.motionY = 0.414;
			MoveUtils.doStrafe((float) ((0.17320627) * 4.2));
			check = true;
		}
		
		if(!this.canLongJump) { 
			event.setPitch(-90.0F);
			mc.thePlayer.sendQueue.addToSendQueue(new C08PacketPlayerBlockPlacement(new BlockPos(-1, -1, -1), 255, mc.thePlayer.getCurrentEquippedItem(), 0.0F, 0.0F, 0.0F));
			if(this.timer.hasElapsed(200)) {
				mc.thePlayer.sendQueue.addToSendQueue(new C07PacketPlayerDigging(C07PacketPlayerDigging.Action.RELEASE_USE_ITEM, BlockPos.ORIGIN, EnumFacing.DOWN));
				this.canLongJump = true;
				this.timer.reset();
			}
		}
		
		/*if(mc.thePlayer.onGround && (mc.gameSettings.keyBindRight.pressed || mc.gameSettings.keyBindLeft.pressed || mc.gameSettings.keyBindForward.pressed || mc.gameSettings.keyBindBack.pressed)) {
			if(groundTicks > 0) {
				groundTicks = 0;
				this.toggle();
				return;
			}
			groundTicks++;
			mc.thePlayer.jump();
		}*/
	}
	
	@EventTarget
	public void onMove(EventMove event) {
		if(!(mc.thePlayer.hurtTime > 0) && !check) {
			event.setX(0);
			event.setY(0);
			event.setZ(0);
		}
	}
	
	@EventTarget
	public void onPacket(EventSendPacket event) {
		if(event.getPacket() instanceof S12PacketEntityVelocity) {
			event.setCancelled(true);
		}
		
		if(event.getPacket() instanceof S27PacketExplosion) {
			event.setCancelled(true);
		}
	}
	
	@EventTarget
	public void onRender(Event3D event) {
		if(check && mc.thePlayer.hurtTime == 0) {
			toggle();
		}
	}

	@Override
	public void onEnable() {
		super.onEnable();
		slot = mc.thePlayer.inventory.currentItem;
		for (int i = 36; i < 45; ++i) {
			if (mc.thePlayer.inventoryContainer.getSlot(i).getHasStack()) {
	        	final ItemStack is = mc.thePlayer.inventoryContainer.getSlot(i).getStack();
	            final Item tems = is.getItem();
	            if (Items.bow == tems) {
	            	mc.thePlayer.inventory.currentItem = i - 36;
	            }
			}
	    }
		//ClientLoader.loaderInstance.moduleManager.getModule("Velocity").setToggled(false);
		canLongJump = false;
		check = false;
		nigger = false;
		posY = mc.thePlayer.posY;
		timer.reset();
		if(ClientLoader.loaderInstance.moduleManager.getModule("Velocity").isToggled()) {
			ClientLoader.loaderInstance.moduleManager.getModule("Velocity").setToggled(false);
		} else
			return;
	}
	
	@Override
	public void onDisable() {
		//ClientLoader.loaderInstance.moduleManager.getModule("Velocity").setToggled(true);
		super.onDisable();
		mc.thePlayer.inventory.currentItem = slot;
		timer.reset();
		mc.timer.timerSpeed = 1F;
		if(!ClientLoader.loaderInstance.moduleManager.getModule("Velocity").isToggled() && nigger == true) {
			ClientLoader.loaderInstance.moduleManager.getModule("Velocity").setToggled(true);
		} else
			return;
	}
	
}
